version: 2

jobs:
  build:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.0

    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install Docker client
          command: |
              set -x
              VER="17.03.0-ce"
              curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
              tar -xz -C /tmp -f /tmp/docker-$VER.tgz
              mv /tmp/docker/* /usr/bin

      - run:
          name: Run GitVersion
          command: |
              # Create volume to contain job data
              docker create -v /repo --name repo alpine:3.4 /bin/true > /dev/null
              docker cp . repo:/repo > /dev/null
              docker run -e JENKINS_URL='http://localhost:8080' --volumes-from repo --name gitversion gittools/gitversion:5.0.2-linux /repo /output buildserver
              docker cp gitversion:/app/gitversion.properties .
              docker rm gitversion > /dev/null
              docker rm /repo > /dev/null

      - run:
          name: Restore packages
          command: dotnet restore
      - run:
          name: Build
          command: dotnet build -c Release
      - run:
          name: Create NuGet packages
          command: |
              # Load environment vars
               . gitversion.properties
              dotnet pack -c Release /p:Version=$GitVersion_NuGetVersion -o bin
      - store_artifacts:
          path: bin/
          destination: bin
      - persist_to_workspace:
          root: .
          paths: 
            - bin

  test:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.0
    
    steps:
      - checkout
      - run:
          name: Restore packages
          command: dotnet restore
      - run:
          name: Build
          command: dotnet build -c Debug
      - run:
          name: Run tests
          command: dotnet test *.sln --no-build --logger "trx" --logger "console;noprogress=true"
      - run:
          name: Convert test results to JUnit format
          command: |
              dotnet tool install -g trx2junit
              export PATH="$PATH:/root/.dotnet/tools"
              trx2junit tests/**/TestResults/*.trx --output tests/TestResults/JUnit
          when: always
      - store_test_results:
          path: tests/TestResults
      - store_artifacts:
          path: tests/TestResults
          destination: TestResults
  
  doc:
    docker:
      - image: knsit/docfx:latest
        user: root

    steps:
      - checkout
      - run:
          name: Generate DocFX documentation
          command: DOCFX_SOURCE_BRANCH_NAME=$CIRCLE_BRANCH docfx docfx.json && docfx build
      - store_artifacts:
          path: _site
          destination: DocFX

  deploy:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.0
    
    steps:
      - attach_workspace:
          at: workspace
      - run:
          name: Publish Nuget packages
          command: |
              curl https://raw.githubusercontent.com/microsoft/artifacts-credprovider/master/helpers/installcredprovider.sh | bash
              dotnet nuget push workspace/bin/ -k $NUGET_PUBLIC_API_KEY -s $NUGET_PUBLIC_FEED

workflows:
  version: 2
  build_test_doc_deploy:
    jobs:
      - build

      - deploy:
          requires:
            - build
            - test
            - doc
          context: org-global

      - test:
          requires:
            - build

      - doc:
          requires:
            - build